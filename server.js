const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = process.env.PORT || 3000;

// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
const JWT_SECRET = process.env.JWT_SECRET || 'linkgold-default-secret';
const NODE_ENV = process.env.NODE_ENV || 'development';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('=== üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–†–í–ï–†–ê ===');
console.log('üåç NODE_ENV:', NODE_ENV);
console.log('üîë JWT_SECRET:', JWT_SECRET ? '***' + JWT_SECRET.slice(-4) : 'NOT SET');
console.log('üö™ PORT:', PORT);
console.log('================================');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = NODE_ENV === 'production' 
  ? '/tmp/linkgold.db' 
  : path.join(__dirname, 'linkgold.db');

console.log('üìä –ü—É—Ç—å –∫ –ë–î:', dbPath);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
  } else {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initializeDatabase() {
  return new Promise((resolve, reject) => {
    db.serialize(() => {
      // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id TEXT UNIQUE,
        username TEXT,
        first_name TEXT,
        balance REAL DEFAULT 0,
        completed_tasks INTEGER DEFAULT 0,
        active_tasks INTEGER DEFAULT 0,
        level INTEGER DEFAULT 1,
        level_progress INTEGER DEFAULT 0,
        is_admin BOOLEAN DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )`, (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users:', err.message);
        } else {
          console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –≥–æ—Ç–æ–≤–∞');
        }
      });

      // –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
      db.run(`CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        category TEXT,
        price REAL DEFAULT 0,
        description TEXT,
        time TEXT,
        link TEXT,
        admin_id TEXT,
        available INTEGER DEFAULT 10,
        status TEXT DEFAULT 'active',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )`, (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã tasks:', err.message);
        } else {
          console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ tasks –≥–æ—Ç–æ–≤–∞');
        }
      });

      // –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
      db.run(`CREATE TABLE IF NOT EXISTS user_tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id TEXT,
        task_id INTEGER,
        status TEXT DEFAULT 'pending',
        photo_url TEXT,
        comment TEXT,
        submitted_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        reviewed_at DATETIME,
        reviewed_by TEXT,
        FOREIGN KEY (task_id) REFERENCES tasks (id)
      )`, (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã user_tasks:', err.message);
        } else {
          console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_tasks –≥–æ—Ç–æ–≤–∞');
        }
      });

      // –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
      db.run(`CREATE TABLE IF NOT EXISTS chats (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id TEXT,
        message TEXT,
        is_admin BOOLEAN DEFAULT 0,
        admin_id TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )`, (err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã chats:', err.message);
        } else {
          console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ chats –≥–æ—Ç–æ–≤–∞');
        }
      });

      // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      db.get('SELECT * FROM users WHERE telegram_id = "8036875641"', (err, row) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', err.message);
        } else if (!row) {
          db.run(`INSERT INTO users (telegram_id, username, first_name, is_admin) 
                  VALUES ('8036875641', '@LinkGoldAdmin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 1)`, 
            (err) => {
              if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', err.message);
              } else {
                console.log('‚úÖ –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω');
              }
            });
        } else {
          console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–∑–∞–¥–∞–Ω–∏—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      db.get('SELECT COUNT(*) as count FROM tasks', (err, row) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', err.message);
        } else if (row.count === 0) {
          const demoTasks = [
            ['–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Telegram –∫–∞–Ω–∞–ª', 'subscribe', 15, '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª', '5 –º–∏–Ω', 'https://t.me/linkgold_channel', '8036875641'],
            ['–ü—Ä–æ—Å–º–æ—Ç—Ä YouTube –≤–∏–¥–µ–æ', 'view', 10, '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ YouTube –¥–æ –∫–æ–Ω—Ü–∞', '10 –º–∏–Ω', 'https://youtube.com', '8036875641'],
            ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø–µ', 'comment', 20, '–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ', '7 –º–∏–Ω', 'https://t.me/test_group', '8036875641'],
            ['–†–µ–ø–æ—Å—Ç –≤ Telegram', 'repost', 25, '–°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–æ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', '3 –º–∏–Ω', 'https://t.me/linkgold_news', '8036875641']
          ];
          
          const stmt = db.prepare(`INSERT INTO tasks (title, category, price, description, time, link, admin_id) VALUES (?, ?, ?, ?, ?, ?, ?)`);
          
          demoTasks.forEach((task, index) => {
            stmt.run(task, (err) => {
              if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', err.message);
              } else if (index === demoTasks.length - 1) {
                console.log('‚úÖ –î–µ–º–æ-–∑–∞–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã');
                resolve();
              }
            });
          });
          
          stmt.finalize();
        } else {
          console.log('‚úÖ –ó–∞–¥–∞–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
          resolve();
        }
      });
    });
  });
}

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname, 'public')));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ success: false, error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
    req.user = user;
    next();
  });
};

// ==================== API ROUTES ====================

// Health check
app.get('/api/health', (req, res) => {
  res.json({ 
    success: true,
    message: '–°–µ—Ä–≤–µ—Ä LinkGold —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString(),
    environment: NODE_ENV,
    version: '1.0.0'
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/api/test', (req, res) => {
  res.json({ 
    success: true,
    message: '–¢–µ—Å—Ç–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç',
    data: {
      port: PORT,
      environment: NODE_ENV,
      database: 'SQLite'
    }
  });
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
app.post('/api/auth/telegram', (req, res) => {
  try {
    const { telegramId, username, firstName } = req.body;

    if (!telegramId) {
      return res.status(400).json({ success: false, error: 'Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.get('SELECT * FROM users WHERE telegram_id = ?', [telegramId], (err, user) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î:', err.message);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
      }

      if (user) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (user.username !== username || user.first_name !== firstName) {
          db.run('UPDATE users SET username = ?, first_name = ? WHERE telegram_id = ?', 
            [username, firstName, telegramId]);
        }
        
        const token = jwt.sign(
          { 
            telegramId: user.telegram_id, 
            username: user.username,
            isAdmin: user.is_admin === 1
          },
          JWT_SECRET,
          { expiresIn: '24h' }
        );

        res.json({ 
          success: true,
          token, 
          user: {
            telegramId: user.telegram_id,
            username: user.username,
            firstName: user.first_name,
            balance: user.balance,
            completedTasks: user.completed_tasks,
            activeTasks: user.active_tasks,
            level: user.level,
            levelProgress: user.level_progress,
            isAdmin: user.is_admin === 1
          }
        });
      } else {
        // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        db.run(
          'INSERT INTO users (telegram_id, username, first_name) VALUES (?, ?, ?)',
          [telegramId, username || `user_${telegramId}`, firstName || 'User'],
          function(err) {
            if (err) {
              console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message);
              return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
            }

            const token = jwt.sign(
              { 
                telegramId, 
                username: username || `user_${telegramId}`,
                isAdmin: false
              },
              JWT_SECRET,
              { expiresIn: '24h' }
            );

            res.json({ 
              success: true,
              token,
              user: {
                telegramId,
                username: username || `user_${telegramId}`,
                firstName: firstName || 'User',
                balance: 0,
                completedTasks: 0,
                activeTasks: 0,
                level: 1,
                levelProgress: 0,
                isAdmin: false
              }
            });
          }
        );
      }
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
app.get('/api/tasks', authenticateToken, (req, res) => {
  try {
    const { search, category } = req.query;
    let query = 'SELECT * FROM tasks WHERE status = "active"';
    const params = [];

    if (search) {
      query += ' AND (title LIKE ? OR description LIKE ?)';
      params.push(`%${search}%`, `%${search}%`);
    }

    if (category && category !== 'all') {
      query += ' AND category = ?';
      params.push(category);
    }

    query += ' ORDER BY created_at DESC';

    db.all(query, params, (err, tasks) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:', err.message);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
      }
      res.json({ success: true, tasks: tasks || [] });
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:', error);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è
app.post('/api/tasks/start', authenticateToken, (req, res) => {
  try {
    const { taskId } = req.body;

    if (!taskId) {
      return res.status(400).json({ success: false, error: 'ID –∑–∞–¥–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
    db.get('SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ? AND status = "pending"', 
      [req.user.telegramId, taskId], (err, existingTask) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏—è:', err.message);
          return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
        }

        if (existingTask) {
          return res.status(400).json({ success: false, error: '–í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ' });
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        db.run('INSERT INTO user_tasks (user_id, task_id) VALUES (?, ?)',
          [req.user.telegramId, taskId], function(err) {
            if (err) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è:', err.message);
              return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è' });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            db.run('UPDATE users SET active_tasks = active_tasks + 1 WHERE telegram_id = ?', 
              [req.user.telegramId]);

            res.json({ success: true, message: '–ó–∞–¥–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ' });
          });
      });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è:', error);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/tasks', authenticateToken, (req, res) => {
  try {
    const { status } = req.query;
    let query = `
      SELECT ut.*, t.title, t.price, t.category 
      FROM user_tasks ut 
      JOIN tasks t ON ut.task_id = t.id 
      WHERE ut.user_id = ?
    `;
    const params = [req.user.telegramId];

    if (status) {
      query += ' AND ut.status = ?';
      params.push(status);
    }

    query += ' ORDER BY ut.submitted_at DESC';

    db.all(query, params, (err, tasks) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
      }
      res.json({ success: true, tasks: tasks || [] });
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/api/chat/messages', authenticateToken, (req, res) => {
  try {
    db.all(
      `SELECT c.*, u.username 
       FROM chats c 
       LEFT JOIN users u ON c.admin_id = u.telegram_id 
       WHERE c.user_id = ? 
       ORDER BY c.created_at ASC`,
      [req.user.telegramId],
      (err, messages) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', err.message);
          return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
        }
        res.json({ success: true, messages: messages || [] });
      }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/api/chat/messages', authenticateToken, (req, res) => {
  try {
    const { message } = req.body;

    if (!message || message.trim().length === 0) {
      return res.status(400).json({ success: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
    }

    db.run(
      'INSERT INTO chats (user_id, message, is_admin) VALUES (?, ?, 0)',
      [req.user.telegramId, message.trim()],
      function(err) {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err.message);
          return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
        }

        res.json({ success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
      }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/profile', authenticateToken, (req, res) => {
  try {
    db.get('SELECT * FROM users WHERE telegram_id = ?', [req.user.telegramId], (err, user) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', err.message);
        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö' });
      }

      if (!user) {
        return res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      res.json({
        success: true,
        user: {
          telegramId: user.telegram_id,
          username: user.username,
          firstName: user.first_name,
          balance: user.balance,
          completedTasks: user.completed_tasks,
          activeTasks: user.active_tasks,
          level: user.level,
          levelProgress: user.level_progress,
          isAdmin: user.is_admin === 1
        }
      });
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// SPA —Ä–æ—É—Ç
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
  res.status(404).json({ success: false, error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
  res.status(500).json({ 
    success: false, 
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    ...(NODE_ENV === 'development' && { details: err.message })
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ LinkGold...');
    
    await initializeDatabase();
    
    app.listen(PORT, '0.0.0.0', () => {
      console.log('================================');
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
      console.log(`üìç –ü–æ—Ä—Ç: ${PORT}`);
      console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${NODE_ENV}`);
      console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
      console.log(`üîó Health check: /api/health`);
      console.log('================================');
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  db.close((err) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err.message);
    } else {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
    }
    process.exit(0);
  });
});

// –ó–∞–ø—É—Å–∫
startServer();