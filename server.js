const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const jwt = require('jsonwebtoken');
const TelegramBot = require('node-telegram-bot-api');

const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const JWT_SECRET = process.env.JWT_SECRET || 'linkgold-secret-key-2024';
const NODE_ENV = process.env.NODE_ENV || 'development';
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN';

console.log('üîß –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ LinkGold...');
console.log('üåç –†–µ–∂–∏–º:', NODE_ENV);
console.log('üö™ –ü–æ—Ä—Ç:', PORT);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
let bot = null;
if (TELEGRAM_BOT_TOKEN && TELEGRAM_BOT_TOKEN !== 'YOUR_BOT_TOKEN') {
    bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
    console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
}

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
const dbPath = process.env.NODE_ENV === 'production' 
    ? '/tmp/linkgold.db' 
    : path.join(__dirname, 'linkgold.db');

const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î:', err.message);
    } else {
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
function initializeDatabase() {
    db.serialize(() => {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        db.run(`CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id TEXT UNIQUE,
            username TEXT,
            first_name TEXT,
            balance REAL DEFAULT 0,
            completed_tasks INTEGER DEFAULT 0,
            active_tasks INTEGER DEFAULT 0,
            level INTEGER DEFAULT 1,
            level_progress INTEGER DEFAULT 0,
            is_admin BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`);

        // –ó–∞–¥–∞–Ω–∏—è
        db.run(`CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            category TEXT,
            price REAL DEFAULT 0,
            description TEXT,
            time TEXT,
            link TEXT,
            admin_id TEXT,
            available INTEGER DEFAULT 10,
            status TEXT DEFAULT 'active',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`);

        // –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        db.run(`CREATE TABLE IF NOT EXISTS user_tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT,
            task_id INTEGER,
            status TEXT DEFAULT 'pending',
            submitted_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            photo_url TEXT,
            comment TEXT,
            admin_review TEXT
        )`);

        // –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
        db.run(`CREATE TABLE IF NOT EXISTS chats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT,
            message TEXT,
            is_admin BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            telegram_message_id TEXT
        )`);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        db.run(`CREATE TABLE IF NOT EXISTS admin_notifications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            type TEXT,
            user_id TEXT,
            task_id INTEGER,
            message TEXT,
            is_read BOOLEAN DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )`);

        // –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
        db.get("SELECT * FROM users WHERE telegram_id = '8036875641'", (err, row) => {
            if (!row) {
                db.run("INSERT INTO users (telegram_id, username, first_name, is_admin) VALUES ('8036875641', '@LinkGoldAdmin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 1)");
            }
        });

        // –î–µ–º–æ-–∑–∞–¥–∞–Ω–∏—è
        db.get("SELECT COUNT(*) as count FROM tasks", (err, row) => {
            if (row.count === 0) {
                const tasks = [
                    ['–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Telegram –∫–∞–Ω–∞–ª', 'subscribe', 15, '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º 3 –¥–Ω—è', '5 –º–∏–Ω', 'https://t.me/linkgold_channel', '8036875641'],
                    ['–ü—Ä–æ—Å–º–æ—Ç—Ä YouTube –≤–∏–¥–µ–æ', 'view', 10, '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–æ –∫–æ–Ω—Ü–∞ –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫', '10 –º–∏–Ω', 'https://youtube.com', '8036875641'],
                    ['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø–µ', 'comment', 20, '–û—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '7 –º–∏–Ω', 'https://t.me/test_group', '8036875641']
                ];
                
                const stmt = db.prepare("INSERT INTO tasks (title, category, price, description, time, link, admin_id) VALUES (?, ?, ?, ?, ?, ?, ?)");
                tasks.forEach(task => stmt.run(task));
                stmt.finalize();
                console.log('‚úÖ –î–µ–º–æ-–∑–∞–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã');
            }
        });
    });
}

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));
app.use(express.static(path.join(__dirname, 'public')));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);
    next();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ success: false, error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(403).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }
        req.user = user;
        next();
    });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º
function notifyAdmins(type, message, userData = null, taskData = null) {
    if (!bot) return;

    db.all("SELECT telegram_id FROM users WHERE is_admin = 1", (err, admins) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤:', err);
            return;
        }

        admins.forEach(admin => {
            let notificationMessage = `üîî ${message}`;
            
            if (userData) {
                notificationMessage += `\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${userData.telegramId})`;
            }
            
            if (taskData) {
                notificationMessage += `\nüìã –ó–∞–¥–∞–Ω–∏–µ: ${taskData.title}`;
                notificationMessage += `\nüí∞ –°—É–º–º–∞: ${taskData.price} —Ä—É–±.`;
            }

            notificationMessage += `\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            const keyboard = {
                inline_keyboard: []
            };

            if (type === 'new_task_submission' && taskData) {
                keyboard.inline_keyboard.push([
                    { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data: `approve_${taskData.id}_${userData.telegramId}` },
                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${taskData.id}_${userData.telegramId}` }
                ]);
            }

            if (type === 'support_message' && userData) {
                keyboard.inline_keyboard.push([
                    { text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `support_${userData.telegramId}` }
                ]);
            }

            bot.sendMessage(admin.telegram_id, notificationMessage, {
                reply_markup: keyboard
            }).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', err);
            });
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç Telegram
if (bot) {
    bot.on('callback_query', (callbackQuery) => {
        const message = callbackQuery.message;
        const data = callbackQuery.data;
        const [action, taskId, userId] = data.split('_');

        if (action === 'approve') {
            // –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
            db.get("SELECT * FROM user_tasks WHERE id = ?", [taskId], (err, userTask) => {
                if (userTask) {
                    db.run("UPDATE user_tasks SET status = 'approved' WHERE id = ?", [taskId]);
                    db.run("UPDATE users SET balance = balance + ?, completed_tasks = completed_tasks + 1, active_tasks = active_tasks - 1 WHERE telegram_id = ?", 
                          [userTask.task_id, userId]);

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    bot.sendMessage(userId, `‚úÖ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ ${userTask.price} —Ä—É–±.`);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
                    bot.editMessageText(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}\n–°—É–º–º–∞: ${userTask.price} —Ä—É–±.`, {
                        chat_id: message.chat.id,
                        message_id: message.message_id
                    });
                }
            });
        } else if (action === 'reject') {
            // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
            db.run("UPDATE user_tasks SET status = 'rejected' WHERE id = ?", [taskId]);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.sendMessage(userId, `‚ùå –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
            bot.editMessageText(`‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`, {
                chat_id: message.chat.id,
                message_id: message.message_id
            });
        } else if (action === 'support') {
            // –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            bot.sendMessage(message.chat.id, `üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot.on('message', (msg) => {
        const chatId = msg.chat.id;
        const text = msg.text;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        db.get("SELECT is_admin FROM users WHERE telegram_id = ?", [chatId.toString()], (err, user) => {
            if (user && user.is_admin) {
                // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                if (text.startsWith('/addtask')) {
                    const parts = text.split('|');
                    if (parts.length >= 6) {
                        const task = {
                            title: parts[1],
                            category: parts[2],
                            price: parseFloat(parts[3]),
                            description: parts[4],
                            time: parts[5],
                            link: parts[6] || '',
                            admin_id: chatId.toString()
                        };

                        db.run("INSERT INTO tasks (title, category, price, description, time, link, admin_id) VALUES (?, ?, ?, ?, ?, ?, ?)",
                            [task.title, task.category, task.price, task.description, task.time, task.link, task.admin_id]);

                        bot.sendMessage(chatId, '‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
                    } else {
                        bot.sendMessage(chatId, '‚ùå –§–æ—Ä–º–∞—Ç: /addtask|–ù–∞–∑–≤–∞–Ω–∏–µ|–ö–∞—Ç–µ–≥–æ—Ä–∏—è|–¶–µ–Ω–∞|–û–ø–∏—Å–∞–Ω–∏–µ|–í—Ä–µ–º—è|–°—Å—ã–ª–∫–∞');
                    }
                }
            }
        });
    });
}

// ==================== API ENDPOINTS ====================

// Health check
app.get('/api/health', (req, res) => {
    res.json({ 
        success: true, 
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç', 
        timestamp: new Date().toISOString() 
    });
});

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
app.post('/api/auth/telegram', (req, res) => {
    const { telegramId, username, firstName, authData } = req.body;

    if (!telegramId) {
        return res.status(400).json({ success: false, error: 'Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram Web App
    if (authData) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ö—ç—à–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        console.log('Auth data received:', authData);
    }

    db.get("SELECT * FROM users WHERE telegram_id = ?", [telegramId], (err, user) => {
        if (err) {
            return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ë–î' });
        }

        if (user) {
            // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const token = jwt.sign({
                telegramId: user.telegram_id,
                username: user.username,
                isAdmin: user.is_admin === 1
            }, JWT_SECRET, { expiresIn: '24h' });

            res.json({
                success: true,
                token,
                user: {
                    telegramId: user.telegram_id,
                    username: user.username,
                    firstName: user.first_name,
                    balance: user.balance,
                    completedTasks: user.completed_tasks,
                    activeTasks: user.active_tasks,
                    level: user.level,
                    levelProgress: user.level_progress,
                    isAdmin: user.is_admin === 1
                }
            });
        } else {
            // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            db.run("INSERT INTO users (telegram_id, username, first_name) VALUES (?, ?, ?)",
                [telegramId, username || `user_${telegramId}`, firstName || 'User'],
                function(err) {
                    if (err) {
                        return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
                    }

                    const token = jwt.sign({
                        telegramId,
                        username: username || `user_${telegramId}`,
                        isAdmin: false
                    }, JWT_SECRET, { expiresIn: '24h' });

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    notifyAdmins('new_user', 'üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!', {
                        telegramId,
                        username: username || `user_${telegramId}`,
                        firstName: firstName || 'User'
                    });

                    res.json({
                        success: true,
                        token,
                        user: {
                            telegramId,
                            username: username || `user_${telegramId}`,
                            firstName: firstName || 'User',
                            balance: 0,
                            completedTasks: 0,
                            activeTasks: 0,
                            level: 1,
                            levelProgress: 0,
                            isAdmin: false
                        }
                    });
                }
            );
        }
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
app.get('/api/tasks', authenticateToken, (req, res) => {
    const { search, category } = req.query;
    let query = "SELECT * FROM tasks WHERE status = 'active'";
    let params = [];

    if (search) {
        query += " AND (title LIKE ? OR description LIKE ?)";
        params.push(`%${search}%`, `%${search}%`);
    }

    if (category && category !== 'all') {
        query += " AND category = ?";
        params.push(category);
    }

    query += " ORDER BY created_at DESC";

    db.all(query, params, (err, tasks) => {
        if (err) {
            return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ë–î' });
        }
        res.json({ success: true, tasks: tasks || [] });
    });
});

// –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è
app.post('/api/tasks/start', authenticateToken, (req, res) => {
    const { taskId } = req.body;

    db.get("SELECT * FROM tasks WHERE id = ?", [taskId], (err, task) => {
        if (err || !task) {
            return res.status(404).json({ success: false, error: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }

        db.run("INSERT INTO user_tasks (user_id, task_id) VALUES (?, ?)",
            [req.user.telegramId, taskId],
            function(err) {
                if (err) {
                    return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è' });
                }

                db.run("UPDATE users SET active_tasks = active_tasks + 1 WHERE telegram_id = ?",
                    [req.user.telegramId]);

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                notifyAdmins('task_started', 'üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', 
                    req.user, task);

                res.json({ success: true, message: '–ó–∞–¥–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ', taskId: this.lastID });
            }
        );
    });
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
app.post('/api/tasks/confirm', authenticateToken, (req, res) => {
    const { taskId, photo, comment } = req.body;

    db.get("SELECT * FROM user_tasks WHERE id = ? AND user_id = ?", [taskId, req.user.telegramId], (err, userTask) => {
        if (err || !userTask) {
            return res.status(404).json({ success: false, error: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }

        db.run("UPDATE user_tasks SET status = 'submitted', photo_url = ?, comment = ? WHERE id = ?",
            [photo, comment, taskId],
            function(err) {
                if (err) {
                    return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è' });
                }

                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                db.get("SELECT t.* FROM tasks t JOIN user_tasks ut ON t.id = ut.task_id WHERE ut.id = ?", [taskId], (err, task) => {
                    if (task) {
                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
                        notifyAdmins('new_task_submission', 'üì∏ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', 
                            req.user, task);
                    }

                    res.json({ success: true, message: '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É' });
                });
            }
        );
    });
});

// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/profile', authenticateToken, (req, res) => {
    db.get("SELECT * FROM users WHERE telegram_id = ?", [req.user.telegramId], (err, user) => {
        if (err || !user) {
            return res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        res.json({
            success: true,
            user: {
                telegramId: user.telegram_id,
                username: user.username,
                firstName: user.first_name,
                balance: user.balance,
                completedTasks: user.completed_tasks,
                activeTasks: user.active_tasks,
                level: user.level,
                levelProgress: user.level_progress,
                isAdmin: user.is_admin === 1
            }
        });
    });
});

// –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
app.get('/api/chat/messages', authenticateToken, (req, res) => {
    db.all("SELECT * FROM chats WHERE user_id = ? ORDER BY created_at ASC",
        [req.user.telegramId],
        (err, messages) => {
            if (err) {
                return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ë–î' });
            }
            res.json({ success: true, messages: messages || [] });
        }
    );
});

app.post('/api/chat/messages', authenticateToken, (req, res) => {
    const { message } = req.body;

    if (!message) {
        return res.status(400).json({ success: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    db.run("INSERT INTO chats (user_id, message) VALUES (?, ?)",
        [req.user.telegramId, message],
        function(err) {
            if (err) {
                return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏' });
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
            notifyAdmins('support_message', 'üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', req.user);

            res.json({ success: true, message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
        }
    );
});

// –ó–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/tasks', authenticateToken, (req, res) => {
    const query = `
        SELECT ut.*, t.title, t.price, t.category 
        FROM user_tasks ut 
        JOIN tasks t ON ut.task_id = t.id 
        WHERE ut.user_id = ? 
        ORDER BY ut.submitted_at DESC
    `;

    db.all(query, [req.user.telegramId], (err, tasks) => {
        if (err) {
            return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ë–î' });
        }
        res.json({ success: true, tasks: tasks || [] });
    });
});

// API –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
app.get('/api/admin/tasks', authenticateToken, (req, res) => {
    if (!req.user.isAdmin) {
        return res.status(403).json({ success: false, error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const query = `
        SELECT ut.*, t.title, t.price, u.username, u.telegram_id 
        FROM user_tasks ut 
        JOIN tasks t ON ut.task_id = t.id 
        JOIN users u ON ut.user_id = u.telegram_id 
        WHERE ut.status = 'submitted'
        ORDER BY ut.submitted_at DESC
    `;

    db.all(query, (err, tasks) => {
        if (err) {
            return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ë–î' });
        }
        res.json({ success: true, tasks: tasks || [] });
    });
});

app.post('/api/admin/tasks/:taskId/approve', authenticateToken, (req, res) => {
    if (!req.user.isAdmin) {
        return res.status(403).json({ success: false, error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const { taskId } = req.params;

    db.get("SELECT ut.*, t.price FROM user_tasks ut JOIN tasks t ON ut.task_id = t.id WHERE ut.id = ?", [taskId], (err, userTask) => {
        if (err || !userTask) {
            return res.status(404).json({ success: false, error: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }

        db.serialize(() => {
            db.run("UPDATE user_tasks SET status = 'approved' WHERE id = ?", [taskId]);
            db.run("UPDATE users SET balance = balance + ?, completed_tasks = completed_tasks + 1, active_tasks = active_tasks - 1 WHERE telegram_id = ?", 
                  [userTask.price, userTask.user_id]);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram
            if (bot) {
                bot.sendMessage(userTask.user_id, 
                    `‚úÖ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ "${userTask.title}" –æ–¥–æ–±—Ä–µ–Ω–æ! –ù–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ ${userTask.price} —Ä—É–±.`
                ).catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err));
            }

            res.json({ success: true, message: '–ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ' });
        });
    });
});

app.post('/api/admin/tasks/:taskId/reject', authenticateToken, (req, res) => {
    if (!req.user.isAdmin) {
        return res.status(403).json({ success: false, error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    const { taskId } = req.params;

    db.run("UPDATE user_tasks SET status = 'rejected' WHERE id = ?", [taskId], function(err) {
        if (err) {
            return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ë–î' });
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram
        db.get("SELECT ut.*, t.title FROM user_tasks ut JOIN tasks t ON ut.task_id = t.id WHERE ut.id = ?", [taskId], (err, userTask) => {
            if (userTask && bot) {
                bot.sendMessage(userTask.user_id, 
                    `‚ùå –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ "${userTask.title}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
                ).catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err));
            }
        });

        res.json({ success: true, message: '–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ' });
    });
});

// SPA —Ä–æ—É—Ç
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err);
    res.status(500).json({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
initializeDatabase();

app.listen(PORT, '0.0.0.0', () => {
    console.log('================================');
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!');
    console.log(`üìç http://localhost:${PORT}`);
    console.log('================================');
});